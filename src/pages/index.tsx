import {jsPDF} from 'jspdf';
import Head from 'next/head'
import { useState } from 'react'
import { FieldValues, SubmitHandler, useForm } from 'react-hook-form';
import { BsFillFileEarmarkPdfFill } from "react-icons/bs";
import { FiTrash2 } from "react-icons/fi";

interface ClientsType {
  nome: string,
  nacionalidade: string,
  estado_civil: string,
  profissao: string,
  rg: string,
}

export default function Home() {

  const { register, handleSubmit, watch, formState: { errors } } = useForm();

  const [ clientSelect, setClientSelect ] = useState({} as ClientsType)

  const [ client, setClient ] = useState<ClientsType>({} as ClientsType)

  const [ clients, setClients ] = useState<ClientsType[]>([])

  function generatePDF(data: ClientsType) {
    setClientSelect(data)
    var legend = document.getElementById("#pdf");

    const doc = new jsPDF('p', 'px', [600, 1000]);

    if (legend !== null) {
      doc.html( legend , {
        callback(doc) {
          doc.save('pdf_name');
        },
        width: 600,
        windowWidth: 600,
      })
    }

  }

  function delItem(index: number) {
    const filter = clients.filter((val, i) => { return i !== index})
    setClients(filter)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='flex flex-col items-center p-10 gap-10 font-medium'>
       
        <div className='flex flex-col p-2 items-center gap-6'>
          
          <text className='text-white text-xl text-shadow'>Adicione as informações de novos clientes</text>

          <input required placeholder='Nome' onChange={(e) => setClient({...client, nome:e.target.value})} className='bg-gray-100 text-xl outline-none border-4 border-transparent focus:border-slate-500 overflow-none text-gray-800 placeholder:text-gray-800/80 rounded-md p-2 shadow-boxSm hover:brightness-75 duration-300 min-w-[400px]'/>

          <input required placeholder='Nacionalidade' onChange={(e) => setClient({...client, nacionalidade:e.target.value})} className='bg-gray-100 text-xl outline-none border-4 border-transparent focus:border-slate-500 overflow-none text-gray-800 placeholder:text-gray-800/80 rounded-md p-2 shadow-boxSm hover:brightness-75 duration-300 min-w-[400px]'/>

          <input required placeholder='Estado Civil' onChange={(e) => setClient({...client, estado_civil:e.target.value})} className='bg-gray-100 text-xl outline-none border-4 border-transparent focus:border-slate-500 overflow-none text-gray-800 placeholder:text-gray-800/80 rounded-md p-2 shadow-boxSm hover:brightness-75 duration-300 min-w-[400px]'/>

          <input required placeholder='Profissão' onChange={(e) => setClient({...client, profissao:e.target.value})} className='bg-gray-100 text-xl outline-none border-4 border-transparent focus:border-slate-500 overflow-none text-gray-800 placeholder:text-gray-800/80 rounded-md p-2 shadow-boxSm hover:brightness-75 duration-300 min-w-[400px]'/>
          
          <input required placeholder='Nº RG' onChange={(e) => setClient({...client, rg:e.target.value})} className='bg-gray-100 text-xl outline-none border-4 border-transparent focus:border-slate-500 overflow-none text-gray-800 placeholder:text-gray-800/80 rounded-md p-2 shadow-boxSm hover:brightness-75 duration-300 min-w-[400px]'/>

          <button onClick={() => (client.nome!==''?setClients([...clients, client]):alert('Defina um nome para o cliente.'))} className=' p-2 bg-gray-50 rounded-full font-semibold hover:bg-gray-100 duration-300 shadow-boxSm '>Criar Cliente</button>

        </div>

        <div className='flex flex-col gap-8 bg-gray-100 p-6 rounded-lg shadow-boxMd min-w-[300px]'>

          { clients.map((val, i) => (
            
            <div onClick={() => setClientSelect(val)} key={i} className='shadow-boxSm rounded-full p-2 px-8 w-full text-lg flex items-center gap-10 justify-between hover:cursor-pointer hover:bg-gray-200/30 duration-300'>
             
              <text >
                {val?.nome}
              </text>
              <text >
                {val?.nacionalidade}
              </text>
              <text >
                {val?.profissao}
              </text>
              <text >
                {val?.estado_civil}
              </text>
              <text >
                {val?.rg}
              </text>

              <div className='flex gap-4'>
                <button onClick={() => generatePDF(val)} className='p-2 transition-all text-white rounded-full duration-500 shadow-boxSm hover:shadow-boxSmRed bg-red-700 hover:translate-x-1 hover:-translate-y-1 hover:bg-red-600'>
                  
                  <BsFillFileEarmarkPdfFill size={28}/>

                </button>

                <button onClick={() => delItem(i)} className='p-1 px-3 hover:bg-gray-50 transition-all text-gray-900 rounded-full duration-500 hover:shadow-boxSm hover:translate-x-1 hover:-translate-y-1 '>
                  
                  <FiTrash2 size={24}/>

                </button>
              </div>

            </div>
          ))}
        </div>

        <div className='border-4 border-gray-700 bg-gray-50 rounded-md shadow-boxSm min-w-[600px] min-h-[1000px]'>

          <div id='#pdf' className='bg-gray-50 max-w-[600px] max-h-[1000px] text-black flex flex-col p-4 gap-2 '>
            
            <h2 className='text-[20px] text-gray-500'>{'Contrato de Prestação de Serviços'}</h2>

            <h4 className='text-[12px]'>{'(Cliente): '}{clientSelect.nome}{', nacionalidade: '}{clientSelect.nacionalidade}{', estado civil: '}{clientSelect.estado_civil}{', profissão: '}{clientSelect.profissao}{', portador (a) da'}  {'cédula de identidade RG nº: '}{clientSelect.rg}{'.'}</h4>
            <br/>

            <h4 className='text-[16px]'>{'- O contratado obriga-se a prestar seus  serviços profissionais de beleza a ser  desenvolvido  de  acordo  com  as  especificações  deste contrato.'}<br/> <br/> {'- Em  caso  de  compra  de  pacotes  de serviços (dia da noiva, eventos, massagens, maquiagens e outros), não   será   permitida   a   substituição,   quando   da   realização   dos serviços, de um serviço contratado no ato da assinatura do contrato por outro não contemplado no pacote.'}<br/> <br/>{'- Os materiais e ferramentas necessários para   a   realização   dos   serviços   serão   fornecidos   única   e exclusivamente pelo contratado. '}</h4>

          </div>

        </div>
      </main>
    </>
  )
}
